
image: "rust:latest"

stages:
  - build
  - test
  - deploy
  - publish
  - post-run

cache:
  key: "${CI_JOB_NAME}"
  paths:
    - ${CI_PROJECT_DIR}/target/

clean-code:
  stage: build
  script:
    - rustup default nightly
    - rustup update
    - rustup component add rustfmt-preview
    - cargo fmt --all -- --check
  allow_failure: true

build-noughts-and-crosses-game:
  stage: build
  script:
    - rustup default nightly
    - rustup update
    - (cd noughts-and-crosses-game && cargo build)

build-noughts-and-crosses-lib:
  stage: build
  script:
    - rustup default nightly
    - rustup update
    - (cd noughts-and-crosses-lib && cargo build)

build-ai-graph:
  stage: build
  script:
    - rustup default nightly
    - rustup update
    - (cd ai-graph && cargo build)

build-noughts-and-crosses-ai-test:
  stage: build
  script:
    - rustup default nightly
    - rustup update
    - (cd noughts-and-crosses-ai-test && cargo build)

build-noughts-and-crosses-random-train:
  stage: build
  script:
    - rustup default nightly
    - rustup update
    - (cd noughts-and-crosses-random-train && cargo build)

unittests:
  stage: test
  script:
    - rustup default nightly
    - rustup update
    - cargo test

benchmarktests:
  stage: test
  script:
    - rustup default nightly
    - rustup update
    - cargo bench


nightly-linux-optimized:
  stage: deploy
  cache: {}
  script:
    - apt-get update
    - rustup default nightly
    - rustup update
    - (cd noughts-and-crosses-game && cargo build --release)
    - (cd noughts-and-crosses-random-train && cargo build --release)
    - (cd noughts-and-crosses-ai-test && cargo build --release)
    - rm -r -f files
    - mkdir files
    - cp target/release/noughts-and-crosses-game files
    - cp target/release/noughts-and-crosses-random-train files
    - cp target/release/noughts-and-crosses-ai-test files
  when: on_success
  artifacts:
    paths:
      - files
    expire_in: 2 weeks
  only:
    refs:
      - master
      - dev

nightly-windows-optimized:
  stage: deploy
  cache: {}
  script:
    - apt-get update
    - rustup default nightly
    - rustup update
    - apt-get install gcc -y
    - apt-get install gcc-mingw-w64-x86-64 -y
    - rustup component add rust-std --target=x86_64-pc-windows-gnu
    - mkdir .cargo
    - touch .cargo/config
    - echo [target.x86_64-pc-windows-gnu] >> .cargo/config
    - echo     linker = \"x86_64-w64-mingw32-gcc\" >> .cargo/config
    - echo     ar = \"x86_64-w64-mingw32-gcc-ar\" >> .cargo/config
    - (cd noughts-and-crosses-game && cargo build --release --target=x86_64-pc-windows-gnu)
    - (cd noughts-and-crosses-random-train && cargo build --release --target=x86_64-pc-windows-gnu)
    - (cd noughts-and-crosses-ai-test && cargo build --release --target=x86_64-pc-windows-gnu)
    - rm -r -f files
    - mkdir files
    - cp target/x86_64-pc-windows-gnu/release/noughts-and-crosses-game.exe files
    - cp target/x86_64-pc-windows-gnu/release/noughts-and-crosses-random-train.exe files
    - cp target/x86_64-pc-windows-gnu/release/noughts-and-crosses-ai-test.exe files
  when: on_success
  artifacts:
    paths:
      - files
    expire_in: 2 weeks
  only:
    refs:
      - master
      - dev

docs:
  stage: deploy
  cache: {}
  script:
    - apt-get update
    - rustup default nightly
    - rustup update
    - (cd ai-graph && cargo doc --no-deps)
    - rm -r -f docs
    - mkdir docs
    - cp -R target/doc docs
  when: on_success
  artifacts:
    paths:
      - docs
    expire_in: 2 weeks
  only:
    refs:
      - master
      - dev

cratesio:
  stage: publish
  cache: {}
  script:
    - apt-get update
    - rustup default nightly
    - rustup update
    - cargo login $CARGO_LOGIN
    - cd ai-graph
    - cargo package
    - cargo publish
  when: on_success
  only:
    refs:
      - master
      - dev
  allow_failure: true


clippy:
  stage: post-run
  script:
    - rustup default nightly
    - rustup update
    - rustup component add clippy-preview
    - cargo clippy --all -- -D clippy::all
  allow_failure: true
